name: Medical Records Docker Image CI - ARM64

on:
  pull_request:
    branches: ['main']
  release:
    types: [published]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/medical-records

jobs:
  build-arm64:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # Extended timeout for ARM64 builds
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          config-inline: |
            [worker.oci]
              max-parallelism = 2

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest-arm64
            type=ref,event=tag,suffix=-arm64
            type=raw,value={{tag}},enable=${{ github.event_name == 'release' }}
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}

      - name: Build and push ARM64 Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=buildkit-arm64
          cache-to: type=gha,mode=max,scope=buildkit-arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          provenance: false

      - name: Test ARM64 Docker image
        if: github.event_name == 'pull_request'
        run: |
          docker build -f ./docker/Dockerfile --platform linux/arm64 -t test-image-arm64 .
          # Basic smoke test - check if container starts and health check passes
          docker run -d --name test-container-arm64 --platform linux/arm64 -p 8001:8000 \
            -e SKIP_MIGRATIONS=true \
            -e SEQUENCE_CHECK_ON_STARTUP=false \
            -e DATABASE_URL="" \
            test-image-arm64
          sleep 30
          echo "Checking if ARM64 container is running..."
          docker ps -a
          echo "Checking ARM64 container logs..."
          docker logs test-container-arm64
          echo "Testing health endpoint..."
          curl -v http://localhost:8001/health || echo "Health check failed"
          echo "Testing if port is accessible..."
          curl -v http://localhost:8001/ || echo "Root endpoint failed"
          echo "Stopping ARM64 container..."
          docker stop test-container-arm64
          docker rm test-container-arm64

      - name: Create multi-arch manifest
        if: github.event_name == 'release'
        run: |
          # Wait for AMD64 build to complete (if running in parallel)
          sleep 30
          
          # Create multi-arch manifest combining AMD64 and ARM64
          docker buildx imagetools create \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-arm64
          
          # Also create versioned multi-arch manifest if it's a tagged release
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            docker buildx imagetools create \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}-arm64
          fi